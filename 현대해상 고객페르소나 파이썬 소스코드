import re
import csv
import json
from datetime import datetime
from io import StringIO

def load_persona_data(csv_data):
    """CSV 형식의 페르소나 데이터를 로드"""
    try:
        # CSV 데이터를 StringIO로 변환하여 처리
        csv_file = StringIO(csv_data)
        reader = csv.DictReader(csv_file)
        persona_list = [row for row in reader]
        return persona_list
    except Exception as e:
        print(f"페르소나 데이터 로드 중 오류: {str(e)}")
        return []

def validate_name(name):
    """이름 유효성 검사: 2~50자, 한글/영문만 허용"""
    pattern = r'^[가-힣a-zA-Z\s]{2,50}$'
    return bool(re.match(pattern, name.strip()))

def validate_birthdate(birthdate):
    """생년월일 유효성 검사: YYYY-MM-DD 형식"""
    try:
        datetime.strptime(birthdate, '%Y-%m-%d')
        year = int(birthdate.split('-')[0])
        current_year = datetime.now().year
        if 1900 <= year <= current_year:
            return True
        return False
    except ValueError:
        return False

def validate_gender(gender):
    """성별 유효성 검사: 남/여"""
    return gender in ['남', '여']

def validate_job(job):
    """직업 유효성 검사: 2~50자, 한글/영문/숫자 허용"""
    pattern = r'^[가-힣a-zA-Z0-9\s]{2,50}$'
    return bool(re.match(pattern, job.strip()))

def get_customer_info():
    """고객 정보 입력받기"""
    customer_data = {}
    
    while True:
        name = input("이름을 입력하세요: ")
        if validate_name(name):
            customer_data['name'] = name.strip()
            break
        print("잘못된 이름 형식입니다. 한글 또는 영문 2~50자를 입력하세요.")

    while True:
        birthdate = input("생년월일을 입력하세요 (YYYY-MM-DD): ")
        if validate_birthdate(birthdate):
            customer_data['birthdate'] = birthdate
            break
        print("잘못된 생년월일 형식입니다. YYYY-MM-DD 형식을 입력하세요.")

    while True:
        gender = input("성별을 입력하세요 (남/여): ")
        if validate_gender(gender):
            customer_data['gender'] = gender
            break
        print("성별은 '남' 또는 '여'로 입력하세요.")

    while True:
        job = input("직업을 입력하세요: ")
        if validate_job(job):
            customer_data['job'] = job.strip()
            break
        print("잘못된 직업 형식입니다. 한글, 영문, 숫자 2~50자를 입력하세요.")

    return customer_data

def match_persona(customer_data, persona_list):
    """입력된 고객 정보를 바탕으로 페르소나 매칭"""
    for persona in persona_list:
        # 이름과 성별이 일치하고, 직업이 유사한 경우 매칭
        if (persona['페르소나명'].split()[-1] == customer_data['name'] and
            persona['성별'] == customer_data['gender'] and
            persona['직업'].lower() in customer_data['job'].lower()):
            return persona
    return None

def save_customer_data(customer_data, matched_persona):
    """고객 정보와 매칭된 페르소나를 JSON 파일로 저장"""
    try:
        combined_data = {
            'customer_info': customer_data,
            'matched_persona': matched_persona
        }
        with open('customer_data_with_persona.json', 'w', encoding='utf-8') as f:
            json.dump(combined_data, f, ensure_ascii=False, indent=4)
        print("고객 정보와 페르소나가 성공적으로 저장되었습니다.")
    except Exception as e:
        print(f"데이터 저장 중 오류 발생: {str(e)}")

def main():
    print("고객 정보 입력 및 페르소나 매칭 시스템")
    print("-" * 30)
    
    try:
        # 제공된 CSV 데이터를 하드코딩된 문자열로 처리 (실제 환경에서는 파일로 대체 가능)
        csv_data = """ID,페르소나명,연령대,성별,직업,거주지,차량 정보,운전 경력,가족 구성,현재 가입 상품 (현대해상),주요 특약 (현대해상 다이렉트 기준),월 평균 보험료 (추정),주요 주행 패턴,운전 습관,정보 탐색 채널,핵심 니즈,페인 포인트,현대해상 다이렉트 선호 이유/기대
P001,안전 지향 이정훈,20대,남성,IT 개발자,서울 송파구,2023 현대 아반떼 (가솔린 1.6),1년 6개월,1인 가구,현대해상 다이렉트 자동차보험 표준형,"마일리지(1만km), 안전 운전(티맵 75점), 블랙박스, 긴급출동, 1인 한정",7.9만원,주중 출퇴근, 주말 교외 데이트,안전 운전 지향, 인터넷 자동차 커뮤니티,보험료 절감, 첫 사고 불안감, 다양한 할인 특약, 셀프 보상 안내
P002,사회 초년생 김민준,20대,남성,영업 사원,인천 연수구,2024 기아 K3 (가솔린 1.6),0년 8개월,1인 가구,현대해상 다이렉트 자동차보험 표준형,"마일리지(1.2만km), 블랙박스, 긴급출동, 1인 한정",8.5만원,잦은 외근, 주말 친구 만남,평이함, 지인 추천, 온라인 보험 비교,높은 초기 보험료, 사고 시 대처 미숙, 간편한 가입 절차
"""
        # 페르소나 데이터 로드
        persona_list = load_persona_data(csv_data)
        if not persona_list:
            print("페르소나 데이터를 로드하지 못했습니다. 기본 입력만 진행합니다.")
        
        # 고객 정보 입력
        customer_info = get_customer_info()
        print("\n입력된 정보:")
        for key, value in customer_info.items():
            print(f"{key}: {value}")
        
        # 페르소나 매칭
        matched_persona = match_persona(customer_info, persona_list) if persona_list else None
        if matched_persona:
            print("\n매칭된 페르소나 정보:")
            for key, value in matched_persona.items():
                print(f"{key}: {value}")
        else:
            print("\n매칭된 페르소나가 없습니다.")
        
        # 데이터 저장
        save_customer_data(customer_info, matched_persona)
        
        # 챗봇으로 데이터 전달을 위한 반환
        return {'customer_info': customer_info, 'matched_persona': matched_persona}
        
    except KeyboardInterrupt:
        print("\n프로그램이 종료되었습니다.")
        return None
    except Exception as e:
        print(f"오류 발생: {str(e)}")
        return None

if __name__ == "__main__":
    result = main()
    # 챗봇 시스템으로 데이터 전달 (예: 챗봇 함수 호출)
    if result:
        print("챗봇 시스템으로 데이터 전달 준비 완료")
        # 여기에 챗봇 시스템 호출 코드 추가 가능
        # 예: chatbot_process(result)
